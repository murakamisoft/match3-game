以下が最新のソース一覧
----- C:\workspace\match3-game\src\App.jsx ----- 
// src/App.jsx
import React, { useState, useEffect } from 'react';
import GameBoard from './components/GameBoard';
import './css/App.css';
import getRandomPiece from './utils/getRandomPiece';
import checkForMatches from './utils/checkForMatches';

const createInitialBoard = (rows, cols) => {
  const board = Array.from({ length: rows }, () =>
    Array.from({ length: cols }, getRandomPiece)
  );
  return board;
};

const App = () => {
  const [board, setBoard] = useState(createInitialBoard(6, 6));
  const [selectedPiece, setSelectedPiece] = useState(null);
  console.log("Current Board:", board);

  const handlePieceClick = (rowIndex, colIndex) => {
    if (selectedPiece) {
      // 2つ目のピースがクリックされた場合
      const newBoard = [...board];
      const temp = newBoard[rowIndex][colIndex];
      newBoard[rowIndex][colIndex] = newBoard[selectedPiece.rowIndex][selectedPiece.colIndex];
      newBoard[selectedPiece.rowIndex][selectedPiece.colIndex] = temp;
      setBoard(newBoard);
      setSelectedPiece(null); // 入れ替え後に選択をリセット

      // マッチのチェック
      const matches = checkForMatches(newBoard);
      if (matches.length > 0) {
        const updatedBoard = removeMatchedPieces(newBoard, matches);
        setBoard(updatedBoard);
      }
    } else {
      // 1つ目のピースがクリックされた場合
      setSelectedPiece({ rowIndex, colIndex });
    }
    console.log(`Clicked on piece at row ${rowIndex}, col ${colIndex}`);
  };


  const removeMatchedPieces = (board, matchedPieces) => {
    const newBoard = board.map(row => [...row]); // 新しいボードを作成

    // マッチしたピースを null に置き換え
    matchedPieces.forEach(({ row, col }) => {
      newBoard[row][col] = null; // 消去
    });

    // 各列に対して上から新しいピースを降らせる処理
    for (let col = 0; col < newBoard[0].length; col++) {
      let emptyRow = newBoard.length - 1; // 一番下の行からチェック
      for (let row = newBoard.length - 1; row >= 0; row--) {
        if (newBoard[row][col] !== null) {
          newBoard[emptyRow][col] = newBoard[row][col]; // 移動
          if (emptyRow !== row) {
            newBoard[row][col] = null; // 元の位置を空に
          }
          emptyRow--; // 次に空の位置を上に移動
        }
      }
      // 空になった行には新しいピースを追加
      for (let row = emptyRow; row >= 0; row--) {
        newBoard[row][col] = getRandomPiece(); // 新しいピース
      }
    }

    return newBoard;
  };


  return (
    <div className="App">
      <h1>Match 3 Game</h1>
      <GameBoard board={board} onPieceClick={handlePieceClick} />
    </div>
  );
};

export default App;
   
----- C:\workspace\match3-game\src\App.test.jsx ----- 
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});
   
----- C:\workspace\match3-game\src\index.jsx ----- 
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();
   
----- C:\workspace\match3-game\src\reportWebVitals.jsx ----- 
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;
   
----- C:\workspace\match3-game\src\setupTests.jsx ----- 
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';
   
----- C:\workspace\match3-game\src\components\GameBoard.jsx ----- 
import React from 'react';
import Piece from './Piece';
import '../css/GameBoard.css';

const GameBoard = ({ board, onPieceClick }) => {
  return (
    <div className="GameBoard">
      {board.map((row, rowIndex) => (
        <div className="GameBoard-row" key={rowIndex}>
          {row.map((piece, colIndex) => (
            <Piece
              key={`${rowIndex}-${colIndex}`}
              piece={piece}
              onClick={() => onPieceClick(rowIndex, colIndex)}
            />
          ))}
        </div>
      ))}
    </div>
  );
};

export default GameBoard;
   
----- C:\workspace\match3-game\src\components\Piece.jsx ----- 
// src/components/Piece.jsx
import React, { useEffect, useState } from 'react';
import '../css/Piece.css';

const Piece = ({ piece, onClick }) => {
  const [isDisappearing, setIsDisappearing] = useState(false);

  useEffect(() => {
    if (!piece) {
      setIsDisappearing(true);
      // 1秒後に状態をリセット
      const timer = setTimeout(() => setIsDisappearing(false), 500);
      return () => clearTimeout(timer);
    }
  }, [piece]);

  if (!piece) return <div className={`Piece empty ${isDisappearing ? 'disappearing' : ''}`}></div>;

  return (
    <div className={`Piece ${piece.type} ${isDisappearing ? 'disappearing' : ''}`} onClick={onClick}>
      {/* Additional content can go here */}
    </div>
  );
};

export default Piece;
   
----- C:\workspace\match3-game\src\utils\checkForMatches.jsx ----- 
const checkForMatches = (board) => {
  const matches = [];
  const rows = board.length;
  const cols = board[0].length;

  // 水平チェック
  for (let row = 0; row < rows; row++) {
    for (let col = 0; col < cols - 2; col++) {
      if (board[row][col] && board[row][col].type === board[row][col + 1].type && board[row][col].type === board[row][col + 2].type) {
        matches.push({ row, col });
        matches.push({ row, col: col + 1 });
        matches.push({ row, col: col + 2 });
      }
    }
  }

  // 垂直チェック
  for (let col = 0; col < cols; col++) {
    for (let row = 0; row < rows - 2; row++) {
      if (board[row][col] && board[row][col].type === board[row + 1][col].type && board[row][col].type === board[row + 2][col].type) {
        matches.push({ row, col });
        matches.push({ row: row + 1, col });
        matches.push({ row: row + 2, col });
      }
    }
  }

  return matches;
};


export default checkForMatches;
   
----- C:\workspace\match3-game\src\utils\getRandomPiece.jsx ----- 
// src/utils/getRandomPiece.jsx
const colors = ['red', 'green', 'blue', 'yellow', 'purple'];

const getRandomPiece = () => {
  return { type: colors[Math.floor(Math.random() * colors.length)] };
};

export default getRandomPiece;
   
----- C:\workspace\match3-game\src\index.css ----- 
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}
   
----- C:\workspace\match3-game\src\css\App.css ----- 
.App {
  text-align: center;
  margin-top: 20px;
}   
----- C:\workspace\match3-game\src\css\GameBoard.css ----- 
.GameBoard {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.GameBoard-row {
  display: flex;
}

.Piece {
  width: 50px;
  height: 50px;
  margin: 5px;
  display: flex;
  justify-content: center;
  align-items: center;
  color: white;
  font-weight: bold;
  cursor: pointer;
}

.red {
  background-color: red;
}

.green {
  background-color: green;
}

.blue {
  background-color: blue;
}

.yellow {
  background-color: yellow;
}

.purple {
  background-color: purple;
}   
----- C:\workspace\match3-game\src\css\Piece.css ----- 
/* src/css/Piece.css */

.piece {
  width: 50px;
  height: 50px;
  border: 1px solid #000;
  display: inline-block;
  transition: background-color 0.3s, transform 0.5s;
}

.piece.red {
  background-color: red;
}

.piece.green {
  background-color: green;
}

.piece.blue {
  background-color: blue;
}

.piece.yellow {
  background-color: yellow;
}

.piece.purple {
  background-color: purple;
}

/* 消えるアニメーション */
@keyframes disappear {
  0% {
    opacity: 1;
    transform: scale(1);
  }

  50% {
    opacity: 0.5;
    transform: scale(1.1);
  }

  100% {
    opacity: 0;
    transform: scale(0);
  }
}

.disappearing {
  animation: disappear 0.5s forwards;
  /* 0.5秒で消えるアニメーション */
}   
